* HaRe todo
** TODO splitSubToks does not take cognizance of leading/trailing comments
** TODO renaming with length change does not adjust surrounding layout for do/let/where/of etc
    - 'of' complete
    - 'do' complete
** TODO rename tid to tidlong in MissingH-1.2.0.2/src/Data/Progress/Meter.hs (164,16) does not fix layout after the do
** TODO rename mod to parsed complains of existing variable named parsed.
     - This is not the case. Line 36 col 10
   [2013-09-10 Tue]
   [[file:~/mysrc/github/alanz/HaRe/test/UtilsSpec.hs::let%20mod%20%3D%20GHC.pm_parsed_source%20$%20GHC.tm_parsed_module%20t][file:~/mysrc/github/alanz/HaRe/test/UtilsSpec.hs::let mod = GHC.pm_parsed_source $ GHC.tm_parsed_module t]]
** TODO The elisp test for buffers to save includes directories that have been modified
** TODO check cabal support
     - [x] It does not seem to pick up the main files. Need to see how to
         set those.
     - [x] pull request for ghc-mod to return those
     - [ ] should possibly make a setting to include targets from
       test/benchmark categories
     - [x] Need to manage current directory in terms of cabal.
     - [ ] Cannot load multiple main modules. Consider generating the
       union of all targets excluding the main modules, and putting
       those in the setTargets list.
** TODO liftToTopLevel in syz Zipper of g from zmapQ introduces param errors
      zmapQ f z = reverse $ downQ [] g z where
           g z' = query f z' : leftQ [] g z'
      becomes
      zmapQ f z = reverse $ downQ [] (g f g)z
      g f z'g= query f z' : leftQ [] (g f g)g f g)z'
** TODO adjustLayoutAfterRename might be usable once only when realigning for the final tokens.
** TODO Provide a warning if refactoring is done on code using CPP.
     State that refactoring may only affect current flags code, not others.
** TODO Make undo (M-x u) undo a refactoring.
** TODO add tests for command-line invocation of ghc-hare
** TODO look at using ordnub
** TODO check .lhs support
** TODO add command line param to turn off timestamping of log lines when -v
** TODO add more granularity on logging control, e.g wether to show tokens while working, whether to dump initial AST
** TODO Look at refactoring Data.Vault.Lazy. Uses include process
    [2013-09-09 Mon]
** TODO from the source files
   :PROPERTIES:
   :ID:       2930a92b-9989-427f-b02e-e47ca11a84de
   :END:
*** TODO Check that the components are in range
    :PROPERTIES:
    :ID:       5318a78f-d18b-4df0-a664-506400ee1b67
    :END:
    [2013-07-11 Thu]
    [[file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/Utils/TokenUtils.hs::--%20TODO:%20check%20that%20the%20components%20are%20in%20range][file:.//src/Language/Haskell/Refact/Utils/TokenUtils.hs::-- TODO: check that the components are in range]]
*** TODO This should be in splitSubToks
    :PROPERTIES:
    :ID:       74497dc3-e597-4892-a55b-ad126e1a2c31
    :END:
    [2013-07-11 Thu]
    [[file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/Utils/TokenUtils.hs::then%20--%20TODO:%20This%20should%20be%20in%20splitSubToks][file:.//src/Language/Haskell/Refact/Utils/TokenUtils.hs::then -- TODO: This should be in splitSubToks]]
*** TODO Calculate end gap in splitSubToks
    :PROPERTIES:
    :ID:       b3691446-2a8d-4a61-8172-a61a0abe7993
    :END:
    [2013-07-11 Thu]
    [[file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/Utils/TokenUtils.hs::egs%20%3D%20(0,0)%20--%20TODO:%20calculate%20this][file:.//src/Language/Haskell/Refact/Utils/TokenUtils.hs::egs = (0,0) -- TODO: calculate this]]
*** TODO Consider comment boundaries in splitSubToks
    :PROPERTIES:
    :ID:       b04c3f84-f728-4086-b7be-005e5657d75a
    :END:
    [2013-07-11 Thu]
    [[file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/Utils/TokenUtils.hs::--%20TODO:%20ignoring%20comment%20boundaries%20to%20start][file:./src/Language/Haskell/Refact/Utils/TokenUtils.hs::-- TODO: ignoring comment boundaries to start]]
*** TODO goDeleteGapsToks - use start and end toks not sspan, there may be comments
    :PROPERTIES:
    :ID:       809fcc7a-3ba1-4241-a850-ad4a5040d699
    :END:
    [2013-07-11 Thu]
    [[file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/Utils/TokenUtils.hs::--%20TODO:%20use%20actual%20first%20and%20last%20toks,%20may%20be%20comments][file:.//src/Language/Haskell/Refact/Utils/TokenUtils.hs::-- TODO: use actual first and last toks, may be comments]]
*** TODO goDeleteGapsToks : deal with deletion within a line
    :PROPERTIES:
    :ID:       51d8c773-a255-4fbe-8d53-d1c18d17326f
    :END:
    [2013-07-11 Thu]
    [[file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/Utils/TokenUtils.hs::--%20TODO:%20what%20about%20deletion%20within%20a%20line?][file:./src/Language/Haskell/Refact/Utils/TokenUtils.hs::-- TODO: what about deletion within a line?]]
*** TODO This looks like a no-op?
    :PROPERTIES:
    :ID:       26e11bee-d04c-46e1-80af-4181157ebadd
    :END:
    [2013-07-11 Thu]
    [[file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/Utils/TokenUtils.hs::--%20TODO:%20This%20looks%20like%20a%20no-op?][file:./src/Language/Haskell/Refact/Utils/TokenUtils.hs::-- TODO: This looks like a no-op?]]
*** TODO generic TODO
    :PROPERTIES:
    :ID:       f7f75aad-8804-4dc3-9511-d7357c1755e7
    :END:
    [[file:src/Language/Haskell/Refact/Utils/TokenUtils.hs::--%20TODO][todos]]
*** TODO move buffers-saved test into hare-refactor-command
    [2013-07-20 Sat]
    [[file:~/mysrc/github/alanz/HaRe/elisp/hare.el::TODO:%20move%20this%20test%20into%20hare-refactor-command][file:~/mysrc/github/alanz/HaRe/elisp/hare.el::TODO: move this test into hare-refactor-command]]
*** TODO Complete SwapArgs
    [2013-07-23 Tue]
    [[file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/SwapArgs.hs::module%20Language.Haskell.Refact.SwapArgs%20(swapArgs)%20where][file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/SwapArgs.hs::module Language.Haskell.Refact.SwapArgs (swapArgs) where]]
*** TODO "renamePN:***ERROR**:do not use getSrcSpan"
    Consider using a generic zipper, and UpUntil to find the nearest
    enclosing SrcSpan

    Seems the problem is that the existing spans may have been
    modified. So, drill down into the token tree to the closest
    enclosing span, and use the toks from that.

    No. Problem is that we are trying to work with a type declaration,
    it is in a different place in the RenamedSourcs, so getSrcSpan
    returns wrong point.
    [2013-07-23 Tue]
    [[file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/Utils/TypeUtils.hs::logm%20$%20"renamePN:***ERROR**:do%20not%20use%20getSrcSpan"][file:~/mysrc/github/alanz/HaRe/src/Language/Haskell/Refact/Utils/TypeUtils.hs::logm $ "renamePN:***ERROR**:do not use getSrcSpan"]]
    
*** DONE cmdtheline 0.2.2 has broken output for --help
    [2013-07-31 Wed]
    [[file:~/mysrc/github/erudify/colog/colog.cabal::cmdtheline%20>%3D%200.2%20&&%20<%200.2.2,][file:~/mysrc/github/erudify/colog/colog.cabal::cmdtheline >= 0.2 && < 0.2.2,]]
